https://www.codewithharry.com/blogpost/transferring-files-passwordless-login-ubuntu-20-04/


//using file zilla


// password less login
ssh-keygen -t rsa  (making public private key)

cd ~
mkdir .ssh  (in server not exist)
scp C:\Users\sachin\.ssh\id_rsa.pub sachio@165.232.177.116:~/.ssh/authorized_keys  (run on client)
ssh user@ip-address


// multiple server management
Quick login using Powershell profiles
If you are using Windows Powershell, you can use PowerShell profiles to efficiently log in to multiple servers. Personally, I manage multiple servers including the one which hosts this site. I need to switch from a personal server to my client's server on a very regular basis. It gets hectic to remember multiple passwords and type them repeatedly. Hence I use PowerShell functions to manage multiple servers. If you are overwhelmed, don't! This is easier than you think and once you configure it you will never look back. Follow the below steps:


 
Step 1 - Create a PowerShell profile
Create a PowerShell profile using the command below:

 New-Item $profile -Type File -Force
This creates a PowerShell profile that will execute whenever you start PowerShell on your computer.



Step 2 - Open and add a function to the PowerShell profile
Open your PowerShell profile by executing the following command on Windows:

notepad $profile
As a part of the next step, we will add few functions to our PowerShell profile. Paste the following code to your profile

echo "Hello Harry, Welcome to PowerShell. Your profile works!" 

function personal{
    Start-Process ssh harry@189.59.45.126
}

function client1{
    Start-Process ssh harry@139.39.45.126
}

function client2{
    Start-Process ssh root@239.59.45.126
}
Replace the usernames and IP addresses with the actual values of your servers. Finally, save and close the file.




 
Step 3 - Test your profile
If you don't restart PowerShell you will see an error like this:

PS C:\Users\Harry> notepad $profile
PS C:\Users\Harry> client2
client2 : The term 'client2' is not recognized as the name of a cmdlet,
function, script file, or operable program. Check the spelling of the name, or
if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ client2
+ ~~~~~~~
    + CategoryInfo          : ObjectNotFound: (client2:String) [], CommandNotFou
   ndException
    + FullyQualifiedErrorId : CommandNotFoundException
Restart your PowerShell and type client2:



Your profile should now work. Close all the PowerShell instances and reopen PowerShell. Now try to execute any one of the following commands:

personal
client1
client2
Wow we are now able to open the server we created for our client by issuing a single word command ie 'client1'

Note: You can always configure serverless login for a root user but using a root account for day-to-day activities is not recommended.

You can configure as many servers as you want of your choice. Hope you understood and will start incorporating this into your server workflows. Happy coding!